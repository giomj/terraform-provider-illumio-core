// Copyright 2021 Illumio, Inc. All Rights Reserved.

package illumiocore

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

var providerVulRep *schema.Provider

func TestAccIllumioVulnerabilityReport_CreateUpdate(t *testing.T) {
	vsAttr := map[string]interface{}{}

	resource.Test(t, resource.TestCase{
		PreCheck:          func() { testAccPreCheck(t) },
		ProviderFactories: testAccProviderFactoriesInternal(&providerVulRep),
		CheckDestroy:      testAccCheckIllumioGeneralizeDestroy(providerVulRep, "illumio-core_vulnerability_report", false),
		Steps: []resource.TestStep{
			{
				Config: testAccCheckIllumioVulnerabilityReportConfig_basic("creation from terraform"),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckIllumioVulnerabilityReportExists("illumio-core_vulnerability_report.test", vsAttr),
					testAccCheckIllumioVulnerabilityReportAttributes("creation from terraform", vsAttr),
				),
				//detected_vulnerabilities will always be set to empty list
				//after terraform apply and will result in non-empty plan
				ExpectNonEmptyPlan: true,
			},
			{
				Config: testAccCheckIllumioVulnerabilityReportConfig_basic("updation from terraform"),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckIllumioVulnerabilityReportExists("illumio-core_vulnerability_report.test", vsAttr),
					testAccCheckIllumioVulnerabilityReportAttributes("updation from terraform", vsAttr),
				),
				//detected_vulnerabilities will always be set to empty list
				//after terraform apply and will result in non-empty plan
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func testAccCheckIllumioVulnerabilityReportConfig_basic(val string) string {
	return fmt.Sprintf(`
	resource "illumio-core_vulnerability_report" "test" {
		name         = "%s"
		report_type  = "rep-type"
		reference_id = "refid"

  		exported_at = "2021-05-01T00:00:00.000Z"
	  
		detected_vulnerabilities {
		  ip_address = "11.1.1.2"
		  port       = "1"
		  proto      = "6"
		  vulnerability {
			href = "/orgs/1/vulnerabilities/deepg1"
		  }
		  workload {
			href = "/orgs/1/workloads/e683b686-8afe-4675-88a1-4463395f0482"
		  }
		}
	  }
	`, val)
}

func testAccCheckIllumioVulnerabilityReportExists(name string, vsAttr map[string]interface{}) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[name]

		if !ok {
			return fmt.Errorf("Vulnerability Report %s not found", name)
		}

		if rs.Primary.ID == "" {
			return fmt.Errorf("ID was not set")
		}

		pConfig := (*providerVulRep).Meta().(Config)
		illumioClient := pConfig.IllumioClient

		_, cont, err := illumioClient.Get(rs.Primary.ID, nil)
		if err != nil {
			return err
		}

		for _, k := range []string{
			"name",
			"report_type",
			"exported_at",
		} {
			vsAttr[k] = cont.S(strings.Split(k, ".")...).Data()
		}

		return nil
	}
}

func testAccCheckIllumioVulnerabilityReportAttributes(val string, vsAttr map[string]interface{}) resource.TestCheckFunc {
	return func(s *terraform.State) error {

		expectation := map[string]interface{}{
			"name":        val,
			"report_type": "rep-type",
			"exported_at": "2021-05-01T00:00:00.000Z",
		}
		for k, v := range expectation {
			if vsAttr[k] != v {
				return fmt.Errorf("Bad %s, Actual: %v, Expected: %v", k, vsAttr[k], v)
			}
		}

		return nil
	}
}
