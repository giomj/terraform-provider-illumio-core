// Copyright 2021 Illumio, Inc. All Rights Reserved.

package models

import (
	"strconv"
)

type VulnerabilityReport struct {
	Name                    string                            `json:"name"`
	ReportType              string                            `json:"report_type"`
	Authoritative           bool                              `json:"authoritative"`
	ScannedIps              []string                          `json:"scanned_ips"`
	DetectedVulnerabilities []*VulReportDetectedVulnerability `json:"detected_vulnerabilities"`
	ExportedAt              string                            `json:"exported_at"`
}

type VulReportDetectedVulnerability struct {
	IPAddress             string `json:"ip_address"`
	Port                  string `json:"port"`
	Proto                 string `json:"proto"`
	Workload              *Href  `json:"workload"`
	Vulnerability         *Href  `json:"vulnerability"`
	ExternalDataReference string `json:"external_data_reference"`
	State                 string `json:"state"`
}

func (o *VulnerabilityReport) ToMap() (map[string]interface{}, error) {
	m := map[string]interface{}{
		"name":          o.Name,
		"report_type":   o.ReportType,
		"authoritative": o.Authoritative,
		"scanned_ips":   o.ScannedIps,
	}

	if o.ExportedAt != "" {
		m["exported_at"] = o.ExportedAt
	}

	detVuls := []map[string]interface{}{}
	for _, v := range o.DetectedVulnerabilities {
		detVuls = append(detVuls, v.ToMap())
	}
	m["detected_vulnerabilities"] = detVuls

	return m, nil
}

func (o *VulReportDetectedVulnerability) ToMap() map[string]interface{} {
	m := map[string]interface{}{
		"ip_address": o.IPAddress,
		"state":      o.State,
	}

	m["workload"], _ = o.Workload.ToMap()
	m["vulnerability"], _ = o.Vulnerability.ToMap()

	if o.Port != "" {
		m["port"], _ = strconv.Atoi(o.Port)
	}

	if o.Proto != "" {
		m["proto"], _ = strconv.Atoi(o.Proto)
	}

	if o.ExternalDataReference != "" {
		m["external_data_reference"] = o.ExternalDataReference
	}

	return m
}
